from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Å–µ—Ö –∏–≥—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
player_settings = {}  # user_id -> {"board": [...], "difficulty": "easy"/"hard"}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è
def new_board():
    return [" " for _ in range(9)]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
def check_winner(board):
    wins = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        [0, 3, 6], [1, 4, 7], [2, 5, 8],
        [0, 4, 8], [2, 4, 6]
    ]
    for a, b, c in wins:
        if board[a] == board[b] == board[c] and board[a] != " ":
            return board[a]
    if " " not in board:
        return "–ù–∏—á—å—è"
    return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
def get_keyboard(board):
    keyboard = []
    for i in range(0, 9, 3):
        row = []
        for j in range(3):
            idx = i + j
            text = board[idx] if board[idx] != " " else "‚¨ú"
            row.append(InlineKeyboardButton(text, callback_data=str(idx)))
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)

# –£–º–Ω—ã–π –±–æ—Ç
def bot_move_smart(board):
    wins = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],
        [0, 3, 6], [1, 4, 7], [2, 5, 8],
        [0, 4, 8], [2, 4, 6]
    ]

    # 1. –ü–æ–±–µ–¥–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
    for a, b, c in wins:
        line = [board[a], board[b], board[c]]
        if line.count("‚≠ï") == 2 and line.count(" ") == 1:
            board[[a, b, c][line.index(" ")]] = "‚≠ï"
            return

    # 2. –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞
    for a, b, c in wins:
        line = [board[a], board[b], board[c]]
        if line.count("‚ùå") == 2 and line.count(" ") == 1:
            board[[a, b, c][line.index(" ")]] = "‚≠ï"
            return

    # 3. –¶–µ–Ω—Ç—Ä
    if board[4] == " ":
        board[4] = "‚≠ï"
        return

    # 4. –£–≥–ª—ã
    for i in [0, 2, 6, 8]:
        if board[i] == " ":
            board[i] = "‚≠ï"
            return

    # 5. –õ—é–±–∞—è —Å–≤–æ–±–æ–¥–Ω–∞—è
    for i in range(9):
        if board[i] == " ":
            board[i] = "‚≠ï"
            return

# –°—Ç–∞—Ä—Ç ‚Äî –≤—ã–±–æ—Ä —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üòé –õ–µ–≥–∫–æ", callback_data="set_difficulty_easy")],
        [InlineKeyboardButton("üß† –°–ª–æ–∂–Ω–æ", callback_data="set_difficulty_hard")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
async def set_difficulty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    difficulty = "easy" if "easy" in query.data else "hard"
    player_settings[user_id] = {
        "board": new_board(),
        "difficulty": difficulty
    }

    await query.edit_message_text(
        f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –¢—ã –≤—ã–±—Ä–∞–ª —É—Ä–æ–≤–µ–Ω—å: {'–õ–µ–≥–∫–æ' if difficulty == 'easy' else '–°–ª–æ–∂–Ω–æ'}\n–¢—ã –∏–≥—Ä–∞–µ—à—å –∑–∞ ‚ùå",
        reply_markup=get_keyboard(player_settings[user_id]["board"])
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–µ—Ç–∫–∏
async def handle_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    game = player_settings.get(user_id)
    if not game:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return

    board = game["board"]
    difficulty = game["difficulty"]
    idx = int(query.data)

    if board[idx] != " ":
        return

    board[idx] = "‚ùå"
    winner = check_winner(board)
    if winner:
        await query.edit_message_text(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}", reply_markup=None)
        player_settings.pop(user_id)
        return

    # –•–æ–¥ –±–æ—Ç–∞
    if difficulty == "easy":
        for i in range(9):
            if board[i] == " ":
                board[i] = "‚≠ï"
                break
    else:
        bot_move_smart(board)

    winner = check_winner(board)
    if winner:
        await query.edit_message_text(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}", reply_markup=None)
        player_settings.pop(user_id)
    else:
        await query.edit_message_reply_markup(reply_markup=get_keyboard(board))

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    TOKEN = "8307156776:AAEeRSzbzR2xuLQGAsWs46o45OG50nEKyfo"  # üëà –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather

    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(set_difficulty, pattern="set_difficulty_.*"))
    app.add_handler(CallbackQueryHandler(handle_click, pattern="^[0-8]$"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()